from mpi4py import MPI
import numpy as np

def nivelacion_cargas(D, n_p):
    s = len(D) % n_p
    t = int((len(D) - s) / n_p)
    out = []
    for i in range(n_p):
        if i < s:
            out.append(D[i*t+i:i*t+i+t+1])            
        else:
            out.append(D[i*t+s:i*t+s+t])
    return out

def scatter(data, root=0):
    comm = MPI.COMM_WORLD
    rank = comm.Get_rank()
    size = comm.Get_size()
    
    if rank == root:
        nivel = nivelacion_cargas(data, size)
    else:
        nivel = None
    
    scatter = comm.scatter(nivel, root=root)
    print("Rank:",rank, "scatter", scatter)
    return scatter

def calcular_suma_parcial_pi(start, end):
    suma_parcial = 0.0
    for i in range(start, end):
        suma_parcial += 4 * (-1)**i / (2*i + 1)
    return suma_parcial

if _name_ == "_main_":
    comm = MPI.COMM_WORLD
    rank = comm.Get_rank()
    size = comm.Get_size()

    n_terms = 1000000 
    data = range(n_terms)
    
    scat = scatter(data, root=0)
    local_start = scat[0]
    local_end = scat[-1] + 1
    
    local_suma_parcial_pi = calcular_suma_parcial_pi(local_start, local_end)
    
    global_suma_parcial_pi = comm.reduce(local_suma_parcial_pi, op=MPI.SUM, root=0)
    
    if rank == 0:
        print("Aproximacion de pi:", global_suma_parcial_pi)
